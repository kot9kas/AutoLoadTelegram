from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from db import initialize
from datetime import datetime
from aiogram.dispatcher import FSMContext
from logic import add_user, check_user_rules_accepted, set_accepted_rules, add_file_info, get_user_by_file_id, add_user, add_file, get_file_info_by_record, add_balance, get_user_balance, get_registration_date, set_user_rating, get_user_rating

TOKEN = '–±–ª–∞ –±–ª–∞ –±–ª–∞' #—Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_ID = '1234567' #–≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∏–¥

CHECK_EMOJI = "‚úÖ"
CROSS_EMOJI = "‚ùå"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

user_categories = {}
user_comments = {}
user_state = {}
user_states = {}




@dp.message_handler(commands=['start'])
async def on_start(message: types.Message):
    user_id = message.from_user.id
    await add_user(user_id)
    rules_accepted = await check_user_rules_accepted(user_id)

    if not rules_accepted:
        keyboard = InlineKeyboardMarkup()
        btn_accept = InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="accept_rules")
        btn_decline = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="decline_rules")
        keyboard.add(btn_accept, btn_decline)
        
        rules_text = (
            "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:</b>\n"
            "\n"
            "1. - –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –±–æ—Ç–æ–º.\n"
            "2. - –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n"
            "3. - –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π.\n"
            "\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
        await message.answer(rules_text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await show_main_menu(message, user_id)


async def show_main_menu(message, user_id):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rating = get_user_rating(user_id)
    registration_date = await get_registration_date(user_id)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.from_user.username:
        greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}!\n"
    else:
        greeting = f"üëã –ü—Ä–∏–≤–µ—Ç!\n"

    if registration_date:
        greeting += f"üìÖ –î–∞—Ç–∞ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\nüåü –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {user_rating}\n\n"
        

    

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    markup = InlineKeyboardMarkup(row_width=2)
    item1 = InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_file")
    item2 = InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data="check_balance")
    item3 = InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    markup.add(item1, item2, item3)

    full_message = greeting + "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"

    await bot.send_message(
        message.chat.id,
        full_message,
        reply_markup=markup
    )



@dp.callback_query_handler(lambda c: c.data == "accept_rules")
async def rules_accepted(callback_query: types.CallbackQuery):
    await set_accepted_rules(callback_query.from_user.id)
    await bot.answer_callback_query(callback_query.id)
    await show_main_menu(callback_query.message, callback_query.from_user.id)

from aiogram.dispatcher.filters import Text

@dp.callback_query_handler(lambda c: c.data == "get_help")
async def get_help(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.message.chat.id,
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @AdminUser."
    )
    await bot.answer_callback_query(callback_query.id)  # –≠—Ç–æ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ inline –∫–Ω–æ–ø–∫–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è


@dp.callback_query_handler(lambda c: c.data == "check_balance")
async def check_balance(message: types.Message):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±–ª–µ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_categories = {}

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    user_id = message.from_user.id
    rules_accepted = await check_user_rules_accepted(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª–∞
    if not rules_accepted:
        keyboard = InlineKeyboardMarkup()
        btn_accept = InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="accept_rules")
        btn_decline = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="decline_rules")
        keyboard.add(btn_accept, btn_decline)
        
        rules_text = (
            "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:</b>\n"
            "\n"
            "1. - –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –±–æ—Ç–æ–º.\n"
            "2. - –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n"
            "3. - –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π.\n"
            "\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
        await message.answer(rules_text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await show_main_menu(message, user_id)
    file_id = message.document.file_id
    file_record_id = add_file(message.from_user.id, file_id)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –≥–∞–ª–æ—á–∫–∞–º–∏/–∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏
    markup = InlineKeyboardMarkup(row_width=2)

    categories = ["Steam", "Origin", "Epic Games"]
    user_categories[message.from_user.id] = []

    for category in categories:
        markup.add(InlineKeyboardButton(f"{CROSS_EMOJI} {category}", callback_data=f"toggle_{category}_{file_record_id}"))

    markup.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{file_record_id}"))
    markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{file_record_id}"))


    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("comment_"))
async def comment_file(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    file_record_id = data[1]
    
    user_comments[callback_query.from_user.id] = file_record_id
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

user_file_comments = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Ñ–∞–π–ª–∞–º

@dp.message_handler(lambda message: message.from_user.id in user_comments, content_types=types.ContentType.TEXT)
async def handle_comment(message: types.Message):
    file_record_id = user_comments.pop(message.from_user.id)
    comment = message.text

    user_file_comments[file_record_id] = comment
    await bot.send_message(message.from_user.id, f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∞–π–ª—É {file_record_id} –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")


@dp.callback_query_handler(lambda c: c.data.startswith("toggle_"))
async def toggle_category(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    category, file_record_id = data[1], data[2]
    user_id = callback_query.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if category in user_categories[user_id]:
        user_categories[user_id].remove(category)
    else:
        user_categories[user_id].append(category)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    markup = InlineKeyboardMarkup(row_width=2)
    categories = ["Steam", "Origin", "Epic Games"]
    for cat in categories:
        if cat in user_categories[user_id]:
            markup.add(InlineKeyboardButton(f"{CHECK_EMOJI} {cat}", callback_data=f"toggle_{cat}_{file_record_id}"))
        else:
            markup.add(InlineKeyboardButton(f"{CROSS_EMOJI} {cat}", callback_data=f"toggle_{cat}_{file_record_id}"))

    markup.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{file_record_id}"))
    markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{file_record_id}"))

    await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id, reply_markup=markup)

@dp.callback_query_handler(lambda c: 'empty_' in c.data)
async def handle_empty(callback_query: types.CallbackQuery):
    file_id = callback_query.data.split('_')[1]
    user_id = await get_user_by_file_id(file_id)
    
    if user_id:
        await bot.send_message(user_id, f"–í–∞—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_id} –ø—É—Å—Ç–æ–π.")

@dp.callback_query_handler(lambda c: c.data == "decline_rules")
async def rules_declined(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")


# –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
@dp.callback_query_handler(lambda c: 'balance_' in c.data)
async def handle_balance(callback_query: types.CallbackQuery):
    file_id = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    msg = await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–º—è—Ç–∏ (–∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ) –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    user_state[user_id] = {'action': 'add_balance', 'file_id': file_id}

@dp.message_handler(lambda message: message.from_user.id in user_state and user_state[message.from_user.id]['action'] == 'add_balance')
async def input_balance_amount(message: types.Message):
    user_id = message.from_user.id
    amount = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ

    # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–º—è—Ç–∏ (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—Ç–∞)
    file_id = user_state[user_id]['file_id']

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    add_balance(user_id, amount)

    del user_state[user_id]  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

    await bot.send_message(user_id, f"–ë–∞–ª–∞–Ω—Å –∑–∞ —Ñ–∞–π–ª {file_id} –Ω–∞—á–∏—Å–ª–µ–Ω. –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} —Ä—É–±–ª–µ–π!")

@dp.callback_query_handler(lambda c: c.data == "upload_file")
async def prompt_for_file(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
@dp.callback_query_handler(lambda c: c.data.startswith("send_"))
async def send_to_admin(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    file_record_id = data[1]
    user_id = callback_query.from_user.id
    categories_selected = user_categories.get(user_id, [])

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ user_file_comments
    comment = user_file_comments.get(file_record_id, "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

    # –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    file_info = await get_file_info_by_record(file_record_id)
    markup = InlineKeyboardMarkup(row_width=2)
    btn_balance = InlineKeyboardButton(text="–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"balance_{file_record_id}")
    btn_empty = InlineKeyboardButton(text="–ü—É—Å—Ç–æ–π", callback_data=f"empty_{file_record_id}")
    btn_set_rating = InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data=f"setrating_{user_id}")
    btn_rating = InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data=f"rating_{user_id}")

    if file_info:
        file_path = file_info['telegram_file_id']

        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_document(
        ADMIN_ID, 
        file_path, 
        caption=(
        f"üìÅ –§–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{callback_query.from_user.username}\n"
        f"üîñ File ID: {file_record_id}\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories_selected)}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    ), 
    reply_markup=markup.add(btn_balance, btn_empty, btn_rating, btn_set_rating)
    )

        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, f"–í–∞—à —Ñ–∞–π–ª –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {file_record_id} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    else:
        await bot.send_message(user_id, f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –§–∞–π–ª —Å –Ω–æ–º–µ—Ä–æ–º {file_record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
def save_user_rating(user_id, rating):
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    set_user_rating(user_id, rating)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_rating')
async def handle_rating_input(message: types.Message):
    user_id = message.from_user.id
    rating = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–º—è—Ç–∏ (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—Ç–∞)
    file_id = user_state[user_id]['file_id']

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    save_user_rating(user_id, rating)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_states[user_id]

    await bot.send_message(user_id, f"–†–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rating}")
@dp.callback_query_handler(lambda c: c.data.startswith("setrating_"))
async def set_user_rating_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = 'awaiting_rating'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–º—è—Ç–∏ (–∏–ª–∏ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ) –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    user_state[user_id] = {'action': 'set_user_rating', 'file_id': None}
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initialize()
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)