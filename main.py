import logging
from telethon import TelegramClient, events, Button

logging.basicConfig(format='[%(levelname) 5s/%(asctime)s] %(name)s: %(message)s', level=logging.WARNING)

api_id = '****' # –¢—É—Ç api —Å —Å–∞–π—Ç–∞ https://my.telegram.org/apps
api_hash = '***' # —Ç—É—Ç —Ö–µ—à —Å —Ç–æ–≥–æ –∂–µ —Å–∞–π—Ç–∞
bot_token = '***' # –¢—É—Ç –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
admin_user_id = ****  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à user ID

client = TelegramClient('bot', api_id, api_hash).start(bot_token=bot_token)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
sessions = {}
users = {}
awaiting_comment = False


@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    try:
        await event.respond('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', buttons=[
            [Button.text('–ü–æ–¥–¥–µ—Ä–∂–∫–∞')],
            [Button.text('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã')],
            [Button.text('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')]
        ])
    except Exception as e:
        logging.error(f"Error in start: {e}")


@client.on(events.NewMessage(pattern='–ü–æ–¥–¥–µ—Ä–∂–∫–∞'))
async def support(event):
    try:
        await event.respond('–ó–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: @kot9k.')
    except Exception as e:
        logging.error(f"Error in support: {e}")


@client.on(events.NewMessage(pattern='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã'))
async def upload_files(event):
    try:
        await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.')
    except Exception as e:
        logging.error(f"Error in upload_files: {e}")


@client.on(events.NewMessage(pattern='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'))
async def personal_cabinet(event):
    user_id = event.sender_id
    if user_id not in users:
        users[user_id] = {
            'files_uploaded': 0,
            'balance': 0,
            'registration_date': event.date.strftime('%Y-%m-%d')
        }
    user_info = users[user_id]
    response = f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {user_info['files_uploaded']}\n" \
               f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_info['balance']} —Ä—É–±.\n" \
               f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info['registration_date']}"
    await event.respond(response)


@client.on(events.NewMessage())
async def handle_files(event):
    try:
        if event.message.media:
            user_id = event.sender_id
            if user_id not in users:
                users[user_id] = {
                    'files_uploaded': 0,
                    'balance': 0,
                    'registration_date': event.date.strftime('%Y-%m-%d')
                }
            users[user_id]['files_uploaded'] += 1

            sessions[event.message.id] = {
                'user_id': event.sender_id,
                'file': event.message.media,
                'status': 'open'
            }
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await client.forward_messages(admin_user_id, event.message)
            await client.send_message(admin_user_id, '–ù–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω!', buttons=[
                [Button.text('–ü—Ä–∏–Ω—è—Ç—å')],
                [Button.text('–û—Ç–∫–ª–æ–Ω–∏—Ç—å')],
                [Button.text('–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')],
                [Button.text('–ó–∞–∫—Ä—ã—Ç—å')]
            ])
    except Exception as e:
        logging.error(f"Error in handle_files: {e}")

@client.on(events.NewMessage(pattern='–ü—Ä–∏–Ω—è—Ç—å'))
async def accept_file(event):
    try:
        session = list(sessions.values())[-1]
        await client.send_message(session['user_id'], '–í–∞—à–∏ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã!')
        session['status'] = 'accepted'
    except Exception as e:
        logging.error(f"Error in accept_file: {e}")

@client.on(events.NewMessage(pattern='–û—Ç–∫–ª–æ–Ω–∏—Ç—å'))
async def reject_file(event):
    try:
        session = list(sessions.values())[-1]
        await client.send_message(session['user_id'], '–í–∞—à–∏ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.')
        session['status'] = 'rejected'
    except Exception as e:
        logging.error(f"Error in reject_file: {e}")

@client.on(events.NewMessage(pattern='–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'))
async def comment_file(event):
    global awaiting_comment
    try:
        if event.sender_id == admin_user_id:
            awaiting_comment = True
            await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.')
    except Exception as e:
        logging.error(f"Error in comment_file: {e}")

@client.on(events.NewMessage())
async def handle_comment(event):
    global awaiting_comment
    try:
        if awaiting_comment and event.sender_id == admin_user_id and sessions:
            session = list(sessions.values())[-1]
            await client.send_message(session['user_id'], f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–∏–º —Ñ–∞–π–ª–∞–º: {event.message.text}')
            session['status'] = 'commented'
            awaiting_comment = False
    except Exception as e:
        logging.error(f"Error in handle_comment: {e}")

@client.on(events.NewMessage(pattern='–ó–∞–∫—Ä—ã—Ç—å'))
async def close_session(event):
    try:
        if sessions:
            session = list(sessions.values())[-1]
            session['status'] = 'closed'
    except Exception as e:
        logging.error(f"Error in close_session: {e}")

@client.on(events.NewMessage(pattern='/admin'))
async def admin_panel(event):
    try:
        if event.sender_id == admin_user_id:
            total_users = len(set([session['user_id'] for session in sessions.values()]))
            open_sessions = sum(1 for session in sessions.values() if session['status'] == 'open')
            closed_sessions = sum(1 for session in sessions.values() if session['status'] == 'closed')
            await event.respond(f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–µ—Å—Å–∏–∏: {open_sessions}\n–ó–∞–∫—Ä—ã—Ç—ã–µ —Å–µ—Å—Å–∏–∏: {closed_sessions}')
    except Exception as e:
        logging.error(f"Error in admin_panel: {e}")

client.run_until_disconnected()